---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro'

// SSR for volume pages to reduce build memory usage
export const prerender = false;

interface PageInfo {
  number: number;
  filename: string;
  src: string;
}

interface VolumeStaticPath {
  params: {
    edition: string;
    volume: string;
  };
  props: {
    editionCode: string;
    editionName: string;
    volumeNumber: string;
    pages: PageInfo[];
  };
}

const { edition, volume } = Astro.params;

// Load data on-demand for SSR
async function loadVolumeData() {
  const editionNames: Record<string, string> = {
    'ch': 'ฉัฏฐสังคายนา',
    'mc': 'มหาชน',
    'sy': 'สยาม'
  };

  if (!edition || !volume || !editionNames[edition]) {
    return null;
  }
  
  try {
    const fs = await import('fs');
    const path = await import('path');
    
    const volumePath = path.join(process.cwd(), 'public', 'tipitaka', edition, volume);
    
    if (!fs.existsSync(volumePath)) {
      return null;
    }

    const files = fs.readdirSync(volumePath);
    const imageFiles = files
      .filter(file => /\.(jpg|jpeg|png|gif|webp)$/i.test(file))
      .sort((a, b) => {
        const aNum = parseInt(a.match(/\d+/)?.[0] || '0');
        const bNum = parseInt(b.match(/\d+/)?.[0] || '0');
        return aNum - bNum;
      });

    const pages: PageInfo[] = imageFiles.map((file, index) => ({
      number: index + 1,
      filename: file,
      src: `/tipitaka/${edition}/${volume}/${file}`
    }));

    return {
      editionCode: edition,
      editionName: editionNames[edition],
      volumeNumber: volume,
      pages
    };
  } catch (error) {
    console.error('Error loading volume data:', error);
    return null;
  }
}

const volumeData = await loadVolumeData();

if (!volumeData) {
  return Astro.redirect('/404');
}
---

<StarlightPage
  frontmatter={{
    title: `เล่ม ${volumeData.volumeNumber} - ${volumeData.editionName}`,
    description: `หน้าทั้งหมดในเล่ม ${volumeData.volumeNumber} (${volumeData.pages.length} หน้า)`
  }}
>
  <nav class="breadcrumb">
    <a href="/tipitaka">พระไตรปิฎก</a> › 
    <a href={`/tipitaka/${volumeData.editionCode}`}>{volumeData.editionName}</a> › 
    เล่ม {volumeData.volumeNumber}
  </nav>

  <div class="volume-info">
    <h2>เล่ม {volumeData.volumeNumber}</h2>
    <p>จำนวน {volumeData.pages.length} หน้า</p>
  </div>

  <div class="pages-grid">
    {volumeData.pages.map((page: PageInfo) => (
      <div class="page-thumbnail">
        <a href={`/tipitaka/${volumeData.editionCode}/${volumeData.volumeNumber}/${page.number}`}>
          <img 
            src={page.src} 
            alt={`หน้า ${page.number}`}
            loading="lazy"
          />
          <div class="page-number">หน้า {page.number}</div>
        </a>
      </div>
    ))}
  </div>

  {volumeData.pages.length === 0 && (
    <div class="no-pages">
      <p>ไม่พบหน้าในเล่มนี้</p>
    </div>
  )}
</StarlightPage>

<style>
  .breadcrumb {
    margin-bottom: 2rem;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: var(--sl-color-accent);
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .volume-info {
    margin-bottom: 2rem;
  }

  .volume-info h2 {
    margin-bottom: 0.5rem;
  }

  .volume-info p {
    color: var(--sl-color-text-accent);
    margin: 0;
  }

  .pages-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
    margin: 2rem 0;
  }

  .page-thumbnail {
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 8px;
    overflow: hidden;
    transition: box-shadow 0.2s ease;
  }

  .page-thumbnail:hover {
    box-shadow: 0 4px 12px var(--sl-color-gray-2);
  }

  .page-thumbnail a {
    display: block;
    text-decoration: none;
    color: var(--sl-color-text);
  }

  .page-thumbnail img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    display: block;
  }

  .page-number {
    padding: 0.5rem;
    text-align: center;
    font-size: 0.9rem;
    background: var(--sl-color-bg-nav);
  }

  .no-pages {
    text-align: center;
    padding: 2rem;
    color: var(--sl-color-text-accent);
  }
</style>
