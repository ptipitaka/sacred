---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro'

// เปลี่ยนเป็น SSR - ไม่ต้อง pre-generate ทุกหน้า
export const prerender = false;

const { edition, volume, page } = Astro.params;

// Load data without filesystem access (to avoid bundling images in function)
function loadPageData() {
  const editionNames: Record<string, string> = {
    'ch': 'ฉัฏฐสังคายนา',
    'mc': 'มหาชน',
    'sy': 'สยาม'
  };

  if (!edition || !volume || !page || !editionNames[edition]) {
    return null;
  }

  const pageNumber = parseInt(page);
  if (isNaN(pageNumber) || pageNumber < 1) {
    return null;
  }
  
  // Use predictable image naming instead of filesystem scan
  // This prevents bundling all images into the serverless function
  const paddedPage = pageNumber.toString().padStart(3, '0');
  const imageFile = `page${paddedPage}.jpg`;
  
  // Basic limits to prevent invalid pages
  const maxPages = 500; // Adjust based on your typical volume size
  
  if (pageNumber > maxPages) {
    return null;
  }
  
  return {
    editionCode: edition,
    editionName: editionNames[edition],
    volumeNumber: volume,
    pageNumber,
    imageSrc: `/tipitaka/${edition}/${volume}/${imageFile}`,
    totalPages: maxPages,
    prevPage: pageNumber > 1 ? pageNumber - 1 : undefined,
    nextPage: pageNumber < maxPages ? pageNumber + 1 : undefined
  };
}

const pageData = loadPageData();

if (!pageData) {
  return Astro.redirect('/404');
}

// Generate navigation URLs
const pageTitle = `เล่ม ${pageData.volumeNumber} หน้า ${pageData.pageNumber}`;
const prevUrl = pageData.prevPage ? `/tipitaka/${pageData.editionCode}/${pageData.volumeNumber}/${pageData.prevPage}` : null;
const nextUrl = pageData.nextPage ? `/tipitaka/${pageData.editionCode}/${pageData.volumeNumber}/${pageData.nextPage}` : null;

---

<StarlightPage
  frontmatter={{
    title: `${pageTitle} - ${pageData.editionName}`,
    description: `หน้า ${pageData.pageNumber} จาก ${pageData.totalPages} หน้า ในเล่ม ${pageData.volumeNumber} ฉบับ${pageData.editionName}`
  }}
>
  <nav class="breadcrumb">
    <a href="/tipitaka">พระไตรปิฎก</a> › 
    <a href={`/tipitaka/${pageData.editionCode}`}>{pageData.editionName}</a> › 
    <a href={`/tipitaka/${pageData.editionCode}/${pageData.volumeNumber}`}>เล่ม {pageData.volumeNumber}</a> › 
    หน้า {pageData.pageNumber}
  </nav>

  <div class="page-info">
    <h2>หน้า {pageData.pageNumber} จาก {pageData.totalPages}</h2>
    <div class="page-navigation">
      {prevUrl && (
        <a href={prevUrl} class="nav-button prev">← หน้าก่อน</a>
      )}
      <span class="page-counter">{pageData.pageNumber} / {pageData.totalPages}</span>
      {nextUrl && (
        <a href={nextUrl} class="nav-button next">หน้าถัดไป →</a>
      )}
    </div>
  </div>

  <div class="page-viewer">
    <img 
      src={pageData.imageSrc} 
      alt={`หน้า ${pageData.pageNumber}`}
      class="page-image"
      loading="lazy"
    />
  </div>

  <div class="bottom-navigation">
    {prevUrl && (
      <a href={prevUrl} class="nav-button prev">← หน้าก่อน</a>
    )}
    <a href={`/tipitaka/${pageData.editionCode}/${pageData.volumeNumber}`} class="nav-button back">กลับไปยังเล่ม</a>
    {nextUrl && (
      <a href={nextUrl} class="nav-button next">หน้าถัดไป →</a>
    )}
  </div>
</StarlightPage>

<style>
  .breadcrumb {
    margin-bottom: 2rem;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: var(--sl-color-accent);
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .page-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .page-info h2 {
    margin: 0;
  }

  .page-navigation {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .page-counter {
    font-weight: 600;
    padding: 0.5rem 1rem;
    background: var(--sl-color-bg-nav);
    border-radius: 4px;
  }

  .page-viewer {
    text-align: center;
    margin: 2rem 0;
  }

  .page-image {
    max-width: 100%;
    height: auto;
    box-shadow: 0 4px 12px var(--sl-color-gray-2);
    border-radius: 8px;
  }

  .bottom-navigation {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
    flex-wrap: wrap;
  }

  .nav-button {
    padding: 0.75rem 1.5rem;
    background: var(--sl-color-accent);
    color: var(--sl-color-white);
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s ease;
  }

  .nav-button:hover {
    background: var(--sl-color-accent-high);
  }

  .nav-button.back {
    background: var(--sl-color-gray-5);
    color: var(--sl-color-text);
  }

  .nav-button.back:hover {
    background: var(--sl-color-gray-4);
  }

  @media (max-width: 768px) {
    .page-info {
      flex-direction: column;
      text-align: center;
    }
    
    .page-navigation {
      justify-content: center;
    }

    .bottom-navigation {
      flex-direction: column;
      align-items: center;
    }

    .nav-button {
      width: 100%;
      max-width: 200px;
      text-align: center;
    }
  }
</style>

<script>
  // Keyboard navigation
  document.addEventListener('keydown', (event) => {
    if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {
      return; // Don't interfere with form inputs
    }

    switch (event.key) {
      case 'ArrowLeft':
        event.preventDefault();
        const prevButton = document.querySelector('.nav-button.prev') as HTMLAnchorElement;
        if (prevButton) {
          prevButton.click();
        }
        break;
      case 'ArrowRight':
        event.preventDefault();
        const nextButton = document.querySelector('.nav-button.next') as HTMLAnchorElement;
        if (nextButton) {
          nextButton.click();
        }
        break;
      case 'Escape':
        event.preventDefault();
        const backButton = document.querySelector('.nav-button.back') as HTMLAnchorElement;
        if (backButton) {
          backButton.click();
        }
        break;
    }
  });
</script>
