---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro'

// SSR to reduce build memory usage
export const prerender = false;

interface VolumeInfo {
  number: string;
  path: string;
  pageCount: number;
}

interface EditionStaticPath {
  params: {
    edition: string;
  };
  props: {
    editionCode: string;
    editionName: string;
    volumes: VolumeInfo[];
  };
}

const { edition } = Astro.params;

// Load data on-demand for SSR
async function loadEditionData() {
  const editionNames: Record<string, string> = {
    'ch': 'ฉัฏฐสังคายนา',
    'mc': 'มหาชน', 
    'sy': 'สยาม'
  };

  if (!edition || !editionNames[edition]) {
    return null;
  }
  
  try {
    const fs = await import('fs');
    const path = await import('path');
    
    const editionPath = path.join(process.cwd(), 'public', 'tipitaka', edition);
    
    if (!fs.existsSync(editionPath)) {
      return null;
    }

    const volumes: VolumeInfo[] = [];
    const volumeDirs = fs.readdirSync(editionPath, { withFileTypes: true });
    
    for (const volumeDir of volumeDirs) {
      if (volumeDir.isDirectory()) {
        const volumePath = path.join(editionPath, volumeDir.name);
        
        // Count pages in volume
        let pageCount = 0;
        try {
          const files = fs.readdirSync(volumePath);
          pageCount = files.filter(file => 
            /\.(jpg|jpeg|png|gif|webp)$/i.test(file)
          ).length;
        } catch (error) {
          console.warn(`Cannot count pages in volume ${volumeDir.name}:`, error);
        }
        
        volumes.push({
          number: volumeDir.name,
          path: `/tipitaka/${edition}/${volumeDir.name}`,
          pageCount
        });
      }
    }
          
          // Sort volumes numerically
          volumes.sort((a, b) => {
            const aNum = parseInt(a.number) || 0;
            const bNum = parseInt(b.number) || 0;
            return aNum - bNum;
          });
    // Sort volumes numerically
    volumes.sort((a, b) => {
      const aNum = parseInt(a.number) || 0;
      const bNum = parseInt(b.number) || 0;
      return aNum - bNum;
    });

    return {
      editionCode: edition,
      editionName: editionNames[edition],
      volumes
    };
  } catch (error) {
    console.error('Error loading edition data:', error);
    return null;
  }
}

const editionData = await loadEditionData();

if (!editionData) {
  return Astro.redirect('/404');
}
---

<StarlightPage
  frontmatter={{
    title: `พระไตรปิฎก ฉบับ${editionData.editionName}`,
    description: `เลือกเล่มจากพระไตรปิฎก ฉบับ${editionData.editionName} (${editionData.volumes.length} เล่ม)`
  }}
>
  <nav class="breadcrumb">
    <a href="/tipitaka">พระไตรปิฎก</a> › {editionData.editionName}
  </nav>

  <div class="volumes-grid">
    {editionData.volumes.map((volume: VolumeInfo) => (
      <div class="volume-card">
        <h3>
          <a href={volume.path}>
            เล่ม {volume.number}
          </a>
        </h3>
        <p class="page-count">{volume.pageCount} หน้า</p>
      </div>
    ))}
  </div>

  {editionData.volumes.length === 0 && (
    <div class="no-volumes">
      <p>ไม่พบข้อมูลเล่มในฉบับนี้</p>
    </div>
  )}
</StarlightPage>

<style>
  .breadcrumb {
    margin-bottom: 2rem;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: var(--sl-color-accent);
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .volumes-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
  }

  .volume-card {
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
    transition: box-shadow 0.2s ease;
  }

  .volume-card:hover {
    box-shadow: 0 4px 12px var(--sl-color-gray-2);
  }

  .volume-card h3 {
    margin-top: 0;
    margin-bottom: 0.5rem;
  }

  .volume-card h3 a {
    text-decoration: none;
    color: var(--sl-color-text);
  }

  .volume-card h3 a:hover {
    color: var(--sl-color-accent);
  }

  .page-count {
    color: var(--sl-color-text-accent);
    margin: 0;
  }

  .no-volumes {
    text-align: center;
    padding: 2rem;
    color: var(--sl-color-text-accent);
  }
</style>
