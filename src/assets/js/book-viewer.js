// @ts-nocheck
/**
 * Simple Vanilla JavaScript Flipbook Viewer for Tipitaka
 * Fixed version with proper odd/even page layout
 */

class BookViewer {
    constructor() {
        /** @type {string|null} */
        this.currentVolume = null;
        
        /** @type {string|null} */
        this.currentEdition = null; // Required parameter, no default
        
        /** @type {number} */
        this.totalPages = 0;
        
        /** @type {number} */
        this.currentPageIndex = 0; // 0-based index
        
        /** @type {Array<{number: number, path: string}>} */
        this.pages = [];
        
        /** @type {Array<{id: string, name: string, folder: string}>} */
        this.volumes = []; // ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ edition
        
        /** @type {Map<string, number>} */
        this.pageCounts = new Map(); // Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ volume
        
        /** @type {Object|null} */
        this.bookViewerMetadata = null; // Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• book viewer (titles, descriptions, pages)
        
        /** @type {boolean} */
        this.isLoadingFromURL = false; // Flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô URL update ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL
        
        /** @type {number|null} */
        this.preloadingTimeout = null; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö smart preloading
        
        /** @type {Map<string, HTMLImageElement>} */
        this.imageCache = new Map(); // Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
        
        /** @type {number} */
        this.maxCacheSize = 20; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ô cache
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ init ‡πÅ‡∏ö‡∏ö async
        this.init().catch(error => {
            console.error('Error during initialization:', error);
        });
    }

    async generateVolumeList(edition = null) {
        const volumes = [];
        
        try {
            // ‡πÇ‡∏´‡∏•‡∏î book viewer metadata ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if (!this.bookViewerMetadata) {
                await this.loadBookViewerMetadata();
            }
            
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ edition ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ edition ‡∏ô‡∏±‡πâ‡∏ô
            if (edition && this.bookViewerMetadata && 
                this.bookViewerMetadata.editions && 
                this.bookViewerMetadata.editions[edition] &&
                this.bookViewerMetadata.editions[edition].volumes) {
                
                const volumeIds = Object.keys(this.bookViewerMetadata.editions[edition].volumes);
                volumeIds.sort((a, b) => parseInt(a) - parseInt(b)); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
                
                volumeIds.forEach(volumeId => {
                    const volumeData = this.bookViewerMetadata.editions[edition].volumes[volumeId];
                    volumes.push({
                        id: volumeId,
                        name: `${volumeId}`,
                        folder: volumeId,
                        volumeName: volumeData.title || `‡πÄ‡∏•‡πà‡∏° ${volumeId}`,
                        pages: volumeData.pages
                    });
                });
                
                console.log(`Generated ${volumes.length} volumes for edition ${edition.toUpperCase()}`);
                return volumes;
            }
            
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ edition ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ metadata ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default (CH + MC ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
            if (this.bookViewerMetadata && this.bookViewerMetadata.editions) {
                const allVolumeIds = new Set();
                
                // ‡∏£‡∏ß‡∏° volume IDs ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å edition
                Object.values(this.bookViewerMetadata.editions).forEach(editionData => {
                    if (editionData.volumes) {
                        Object.keys(editionData.volumes).forEach(volumeId => {
                            allVolumeIds.add(volumeId);
                        });
                    }
                });
                
                const sortedIds = Array.from(allVolumeIds).sort((a, b) => parseInt(a) - parseInt(b));
                
                sortedIds.forEach(volumeId => {
                    volumes.push({
                        id: volumeId,
                        name: `${volumeId}`,
                        folder: volumeId
                    });
                });
                
                console.log(`Generated ${volumes.length} volumes from metadata (all editions)`);
                return volumes;
            }
        } catch (error) {
            console.warn('Failed to load metadata, falling back to default volume list:', error);
        }
        
        // Fallback: ‡πÉ‡∏ä‡πâ hard code ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î metadata ‡πÑ‡∏î‡πâ
        for (let i = 1; i <= 45; i++) { // ‡πÉ‡∏ä‡πâ 45 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ MC ‡∏°‡∏µ 45 ‡πÄ‡∏•‡πà‡∏°
            const volumeId = i.toString();
            volumes.push({
                id: volumeId,
                name: `${i}`,
                folder: volumeId
            });
        }
        
        console.log(`Generated ${volumes.length} volumes (fallback mode)`);
        return volumes;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡πÉ‡∏´‡πâ volume ID ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    normalizeVolumeId(volume) {
        if (!volume) return null;
        
        const num = parseInt(volume);
        if (isNaN(num) || num < 1) return null;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ volume ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô edition ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (this.currentEdition && this.bookViewerMetadata && 
            this.bookViewerMetadata.editions &&
            this.bookViewerMetadata.editions[this.currentEdition] &&
            this.bookViewerMetadata.editions[this.currentEdition].volumes) {
            
            const volumeId = num.toString();
            if (this.bookViewerMetadata.editions[this.currentEdition].volumes[volumeId]) {
                return volumeId;
            } else {
                console.warn(`Volume ${volumeId} not found in ${this.currentEdition.toUpperCase()} edition`);
                return null;
            }
        }
        
        // Fallback: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (1-45)
        if (num <= 45) {
            return num.toString();
        }
        
        return null;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡πÉ‡∏´‡πâ edition ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    normalizeEdition(edition) {
        if (!edition) return null; // ‡πÑ‡∏°‡πà‡∏°‡∏µ default, ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà
        
        const ed = edition.toLowerCase().trim();
        
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö editions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        const validEditions = ['ch', 'mc'];
        
        if (validEditions.includes(ed)) {
            return ed;
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà edition ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô null
        console.warn(`Invalid edition: ${edition}`);
        return null;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ edition
    showEditionRequired() {
        const container = document.querySelector('.container');
        if (container) {
            container.innerHTML = `
                <div class="header">
                    <h1>Book Viewer</h1>
                </div>
                <div style="text-align: center; padding: 40px; background: #f9f9f9; border-radius: 8px; margin: 20px;">
                    <h2 style="color: #d32f2f; margin-bottom: 20px;">‚ö†Ô∏è Edition Parameter Required</h2>
                    <p style="font-size: 1.1rem; margin-bottom: 20px;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ edition ‡πÉ‡∏ô URL parameter:</p>
                    
                    <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #2196f3;">
                        <h3 style="color: #1976d2; margin-bottom: 15px;">üìñ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:</h3>
                        
                        <div style="margin-bottom: 20px;">
                            <h4 style="color: #1565c0; margin-bottom: 10px;">üìù Parameters ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà:</h4>
                            <div style="margin: 10px 0; padding-left: 20px;">
                                <p><strong>edition/e</strong> = ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏â‡∏ö‡∏±‡∏ö (<span style="color:red;">*</span>)</p>
                                <p><strong>volume/v</strong> = ‡πÄ‡∏•‡∏Ç‡πÄ‡∏•‡πà‡∏°</p>
                                <p><strong>page/p</strong> = ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤</p>
                            </div>
                        </div>
                        
                        <h4 style="color: #1565c0; margin: 15px 0 10px 0;">üî§ ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (Full Format):</h4>
                        <div style="font-family: monospace; background: #f5f5f5; padding: 10px; border-radius: 4px; margin: 10px 0;">
                            <span style="color: #1976d2;">?edition=[‡∏â‡∏ö‡∏±‡∏ö]&volume=[‡πÄ‡∏•‡πà‡∏°]&page=[‡∏´‡∏ô‡πâ‡∏≤]</span>
                        </div>
                        
                        <h4 style="color: #1565c0; margin: 15px 0 10px 0;">üî° ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ (Short Format):</h4>
                        <div style="font-family: monospace; background: #f5f5f5; padding: 10px; border-radius: 4px; margin: 10px 0;">
                            <span style="color: #1976d2;">?e=[‡∏â‡∏ö‡∏±‡∏ö]&v=[‡πÄ‡∏•‡πà‡∏°]&p=[‡∏´‡∏ô‡πâ‡∏≤]</span>
                        </div>
                    </div>
                    

                </div>
            `;
        }
        
        // ‡∏ã‡πà‡∏≠‡∏ô flipbook ‡πÅ‡∏•‡∏∞ controls
        const flipbookContainer = document.getElementById('flipbook-container');
        const controls = document.getElementById('controls');
        if (flipbookContainer) flipbookContainer.style.display = 'none';
        if (controls) controls.style.display = 'none';
        
        console.error('Edition parameter is required. Please add &ed=ch or &ed=mc to URL');
    }

    async init() {
        await this.setupVolumeSelector();
        this.setupEventListeners();
        this.setupKeyboardShortcuts();
        this.setupCleanup();
        await this.handleURLParameters(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ URL parameters
    }

    /**
     * Handle URL parameters - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á query parameters ‡πÅ‡∏•‡∏∞ hash parameters
     * Examples:
     * - book-viewer?volume=1&page=5
     * - book-viewer#volume=1&page=5
     * - book-viewer?v=1&p=5
     */
    async handleURLParameters() {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö query parameters (?volume=1&page=5)
        const urlParams = new URLSearchParams(window.location.search);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hash parameters (#volume=1&page=5)
        const hashParams = new URLSearchParams(window.location.hash.replace('#', ''));
        
        // ‡∏£‡∏ß‡∏° parameters ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á (hash ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
        const params = new URLSearchParams();
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° query params ‡∏Å‡πà‡∏≠‡∏ô
        urlParams.forEach((value, key) => params.set(key, value));
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° hash params ‡∏ó‡∏±‡∏ö (override)
        hashParams.forEach((value, key) => params.set(key, value));
        
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
        const rawVolume = params.get('volume') || params.get('v');
        const page = params.get('page') || params.get('p');
        const rawEdition = params.get('edition') || params.get('e');
        
        // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ volume ID ‡πÅ‡∏•‡∏∞ edition ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        const volume = this.normalizeVolumeId(rawVolume);
        const edition = this.normalizeEdition(rawEdition);
        
        console.log('URL Parameters detected:', { rawVolume, volume, page, rawEdition, edition });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ edition ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!edition) {
            this.showEditionRequired();
            return;
        }
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ edition ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        this.currentEdition = edition;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á edition
        await this.updateEditionDisplay();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ volume ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô URL ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (rawVolume && !volume) {
            alert(`Volume ${rawVolume} not found in ${edition.toUpperCase()} edition\nPlease select an available volume from dropdown`);
            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå URL parameters ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            history.pushState(null, null, window.location.pathname + `?edition=${edition}`);
            return;
        }
        
        if (volume) {
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô URL update ‡∏ã‡πâ‡∏≥
            this.isLoadingFromURL = true;
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ volume selector
            const volumeSelect = document.getElementById('volumeSelect');
            if (volumeSelect) {
                volumeSelect.value = volume;
                
                // ‡πÇ‡∏´‡∏•‡∏î volume ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
                this.loadVolume(volume).then(() => {
                    if (page) {
                        const pageNum = parseInt(page);
                        if (pageNum > 0 && pageNum <= this.totalPages) {
                            this.goToPage(pageNum - 1); // Convert to 0-based index
                        }
                    }
                    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
                    this.isLoadingFromURL = false;
                });
            }
        }
        
        // Listen for hash changes (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö single page app navigation)
        window.addEventListener('hashchange', () => {
            this.handleURLParameters();
        });
    }

    /**
     * Update edition display in UI
     */
    async updateEditionDisplay() {
        // ‡πÇ‡∏´‡∏•‡∏î book viewer metadata ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if (!this.bookViewerMetadata) {
            await this.loadBookViewerMetadata();
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï header title ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á edition
        const headerTitle = document.querySelector('.header h1');
        if (headerTitle) {
            let displayTitle = this.currentEdition.toUpperCase();
            
            // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å metadata ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (this.bookViewerMetadata && 
                this.bookViewerMetadata.editions && 
                this.bookViewerMetadata.editions[this.currentEdition]) {
                displayTitle = this.bookViewerMetadata.editions[this.currentEdition].title;
            }
            
            headerTitle.textContent = displayTitle;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï document title
        let docTitle = this.currentEdition.toUpperCase();
        if (this.bookViewerMetadata && 
            this.bookViewerMetadata.editions && 
            this.bookViewerMetadata.editions[this.currentEdition]) {
            docTitle = this.bookViewerMetadata.editions[this.currentEdition].title;
        }
        document.title = `${docTitle} - Book Viewer`;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï volume selector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edition ‡∏ô‡∏µ‡πâ
        await this.updateVolumeSelector(this.currentEdition);
    }

    /**
     * Update volume title display in UI
     */
    async updateVolumeDisplay(volumeId) {
        // ‡πÇ‡∏´‡∏•‡∏î book viewer metadata ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if (!this.bookViewerMetadata) {
            await this.loadBookViewerMetadata();
        }

        const volumeTitle = document.querySelector('.volume-title');
        if (!volumeTitle) return;

        if (volumeId && this.bookViewerMetadata && 
            this.bookViewerMetadata.editions && 
            this.bookViewerMetadata.editions[this.currentEdition] &&
            this.bookViewerMetadata.editions[this.currentEdition].volumes &&
            this.bookViewerMetadata.editions[this.currentEdition].volumes[volumeId]) {
            
            const volumeData = this.bookViewerMetadata.editions[this.currentEdition].volumes[volumeId];
            
            // Clear cache if data looks wrong (empty pages for volumes that should have them)
            if (volumeId === '1' && (!volumeData.pages || volumeData.pages === 0)) {
                console.log('‚ö†Ô∏è Detected missing pages for volume 1, clearing cache...');
                localStorage.removeItem('tipitaka-book-viewer');
                localStorage.removeItem('tipitaka-book-viewer-timestamp');
                // Reload metadata
                await this.loadBookViewerMetadata();
                // Get fresh data
                if (this.bookViewerMetadata && 
                    this.bookViewerMetadata.editions && 
                    this.bookViewerMetadata.editions[this.currentEdition] &&
                    this.bookViewerMetadata.editions[this.currentEdition].volumes &&
                    this.bookViewerMetadata.editions[this.currentEdition].volumes[volumeId]) {
                    volumeData = this.bookViewerMetadata.editions[this.currentEdition].volumes[volumeId];
                    console.log('üîÑ Refreshed volume data:', volumeData);
                }
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å description ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            let displayParts = [];
            if (volumeData.desc && volumeData.desc.trim() !== '') {
                displayParts.push(volumeData.desc.trim());
            }
            if (volumeData.pages) {
                displayParts.push(`${volumeData.pages} pages`);
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á description : pages ‡∏´‡∏£‡∏∑‡∏≠ Volume ID ‡πÄ‡∏õ‡πá‡∏ô fallback
            if (displayParts.length > 0) {
                volumeTitle.textContent = displayParts.join(' : ');
            } else {
                volumeTitle.textContent = `Volume ${volumeId}`;
            }
            
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ tooltip
            volumeTitle.title = '';
            
            volumeTitle.style.display = 'block';
        } else if (volumeId) {
            volumeTitle.textContent = `Volume ${volumeId}`;
            volumeTitle.title = '';
            volumeTitle.style.display = 'block';
        } else {
            volumeTitle.style.display = 'none';
        }
    }

    /**
     * Update URL when volume, page, or edition changes
     */
    updateURL(volume = null, page = null, edition = null) {
        // ‡πÑ‡∏°‡πà update URL ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL parameters
        if (this.isLoadingFromURL) {
            return;
        }
        
        if (!volume) volume = this.currentVolume;
        if (!edition) edition = this.currentEdition;
        if (!page && this.pages.length > 0) {
            // ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤ (odd page) ‡πÄ‡∏õ‡πá‡∏ô reference
            const currentPage = this.pages[this.currentPageIndex];
            if (currentPage && currentPage.number % 2 === 1) {
                page = currentPage.number;
            } else if (this.currentPageIndex + 1 < this.totalPages) {
                const nextPage = this.pages[this.currentPageIndex + 1];
                if (nextPage && nextPage.number % 2 === 1) {
                    page = nextPage.number;
                }
            }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö parameter ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°
        const currentParams = new URLSearchParams(window.location.search);
        const hashParams = new URLSearchParams(window.location.hash.replace('#', ''));
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡πá‡∏°
        let useShortForm = false;
        if (currentParams.has('v') || currentParams.has('p') || currentParams.has('e') ||
            hashParams.has('v') || hashParams.has('p') || hashParams.has('e')) {
            useShortForm = true;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ query parameters ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const hasQueryParams = window.location.search.length > 0;
        
        if (hasQueryParams) {
            // ‡πÉ‡∏ä‡πâ query parameters - ‡∏•‡∏ö parameters ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡πÉ‡∏´‡∏°‡πà
            const url = new URL(window.location.href);
            
            // ‡∏•‡πâ‡∏≤‡∏á parameters ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            ['volume', 'v', 'page', 'p', 'edition', 'e', 'ed'].forEach(param => {
                url.searchParams.delete(param);
            });
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° parameters ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            if (useShortForm) {
                if (edition) url.searchParams.set('e', edition);
                if (volume) url.searchParams.set('v', volume);
                if (page) url.searchParams.set('p', page.toString());
            } else {
                if (edition) url.searchParams.set('edition', edition);
                if (volume) url.searchParams.set('volume', volume);
                if (page) url.searchParams.set('page', page.toString());
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà reload ‡∏´‡∏ô‡πâ‡∏≤
            const newURL = url.pathname + url.search;
            if (window.location.pathname + window.location.search !== newURL) {
                history.replaceState(null, null, newURL);
            }
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ query parameters ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ hash parameters
            const params = new URLSearchParams();
            
            // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hash (default)
            if (edition) params.set('edition', edition);
            if (volume) params.set('volume', volume);
            if (page) params.set('page', page.toString());
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL hash ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà reload ‡∏´‡∏ô‡πâ‡∏≤
            if (params.toString()) {
                const newHash = '#' + params.toString();
                if (window.location.hash !== newHash) {
                    history.pushState(null, null, newHash);
                }
            }
        }
    }

    async setupVolumeSelector() {
        const selector = document.getElementById('volumeSelect');
        if (!selector) return;
        
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå options ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
        selector.innerHTML = '<option value="">-- Select Volume --</option>';
        
        // ‡πÉ‡∏™‡πà placeholder ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î
        const loadingOption = document.createElement('option');
        loadingOption.value = '';
        loadingOption.textContent = 'Loading volumes...';
        loadingOption.disabled = true;
        selector.appendChild(loadingOption);
    }
    
    async updateVolumeSelector(edition) {
        const selector = document.getElementById('volumeSelect');
        if (!selector || !edition) return;
        
        try {
            // ‡πÇ‡∏´‡∏•‡∏î volume list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edition ‡∏ô‡∏µ‡πâ
            this.volumes = await this.generateVolumeList(edition);
            
            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡πÉ‡∏´‡∏°‡πà
            selector.innerHTML = '<option value="">-- Select Volume --</option>';
            
            this.volumes.forEach(volume => {
                const option = document.createElement('option');
                option.value = volume.folder;
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö option ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ title ‡πÅ‡∏•‡∏∞ desc ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                let optionText = `Volume ${volume.name}`;
                if (volume.volumeName && volume.volumeName !== `‡πÄ‡∏•‡πà‡∏° ${volume.id}`) {
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ volumeName (title) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤ default
                    optionText = `Volume ${volume.name} - ${volume.volumeName}`;
                }
                
                option.textContent = optionText;
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° title attribute ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tooltip
                if (volume.pages) {
                    option.title = `${volume.pages} pages`;
                }
                
                selector.appendChild(option);
            });
            
            console.log(`Volume selector updated for ${edition.toUpperCase()}: ${this.volumes.length} volumes`);
            
        } catch (error) {
            console.error('Error updating volume selector:', error);
            
            // Fallback: ‡πÅ‡∏™‡∏î‡∏á error message
            selector.innerHTML = '<option value="">Error loading volume list</option>';
        }
    }

    setupEventListeners() {
        const volumeSelect = document.getElementById('volumeSelect');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const firstBtn = document.getElementById('firstBtn');
        const lastBtn = document.getElementById('lastBtn');
        const helpBtn = document.getElementById('helpBtn');

        if (volumeSelect) {
            volumeSelect.addEventListener('change', (e) => {
                if (e.target.value) {
                    // Normalize volume ID ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
                    const normalizedVolume = this.normalizeVolumeId(e.target.value);
                    console.log('Volume selected:', e.target.value, '-> normalized:', normalizedVolume);
                    
                    if (normalizedVolume) {
                        this.loadVolume(normalizedVolume);
                    } else {
                        alert('Invalid volume selected');
                    }
                } else {
                    this.hideFlipbook();
                    // Clear URL parameters
                    history.pushState(null, null, window.location.pathname);
                }
            });
        }

        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.prevPage());
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.nextPage());
        }

        if (firstBtn) {
            firstBtn.addEventListener('click', () => this.goToPage(0));
        }

        if (lastBtn) {
            lastBtn.addEventListener('click', () => this.goToPage(this.totalPages - 1));
        }

        if (helpBtn) {
            helpBtn.addEventListener('click', () => this.showHelp());
        }
    }

    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            if (!this.pages.length) return;
            
            switch(e.key) {
                case 'ArrowRight':
                case ' ':
                    e.preventDefault();
                    this.nextPage();
                    break;
                case 'ArrowLeft':
                    e.preventDefault();
                    this.prevPage();
                    break;
                case 'Home':
                    e.preventDefault();
                    this.goToPage(0);
                    break;
                case 'End':
                    e.preventDefault();
                    this.goToPage(this.totalPages - 1);
                    break;
            }
        });
    }

    async loadVolume(volumeFolder) {
        this.currentVolume = volumeFolder;
        this.showLoading();
        
        try {
            // ‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏£‡∏¥‡∏á
            this.totalPages = await this.getTotalPages(volumeFolder);
            
            if (this.totalPages === 0) {
                alert('No images found in this volume');
                this.hideFlipbook();
                return;
            }

            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ 1 ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÜ
            this.currentPageIndex = 0;
            this.pages = new Array(this.totalPages); // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
            this.preloadedPages = new Set(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏°
            await this.updateVolumeDisplay(volumeFolder);
            
            this.showFlipbook();
            await this.preloadCurrentPages(); // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            this.updateDisplay();
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL parameters)
            if (!this.isLoadingFromURL) {
                this.updateURL();
            }
            
        } catch (error) {
            console.error('Error loading volume:', error);
            alert('Error loading volume');
            this.hideFlipbook();
        }
    }

    async getTotalPages(volumeFolder) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
        if (this.pageCounts.has(volumeFolder)) {
            console.log(`Using cached page count for volume ${volumeFolder}: ${this.pageCounts.get(volumeFolder)}`);
            return this.pageCounts.get(volumeFolder);
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• book viewer metadata ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if (!this.bookViewerMetadata) {
            console.log('Loading book viewer metadata...');
            await this.loadBookViewerMetadata();
        }
        
        // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å metadata
        console.log('üîç Checking metadata for:', {
            edition: this.currentEdition,
            volume: volumeFolder,
            hasMetadata: !!this.bookViewerMetadata,
            hasEdition: !!(this.bookViewerMetadata?.editions?.[this.currentEdition]),
            hasVolume: !!(this.bookViewerMetadata?.editions?.[this.currentEdition]?.volumes?.[volumeFolder])
        });
        
        if (this.bookViewerMetadata && 
            this.bookViewerMetadata.editions &&
            this.bookViewerMetadata.editions[this.currentEdition] && 
            this.bookViewerMetadata.editions[this.currentEdition].volumes &&
            this.bookViewerMetadata.editions[this.currentEdition].volumes[volumeFolder]) {
            
            const volumeData = this.bookViewerMetadata.editions[this.currentEdition].volumes[volumeFolder];
            const pageCount = volumeData.pages;
            this.pageCounts.set(volumeFolder, pageCount);
            console.log(`‚úÖ Volume ${volumeFolder} (${this.currentEdition.toUpperCase()}): ${pageCount} pages (from metadata)`);
            return pageCount;
        } else {
            console.warn('‚ùå Volume not found in metadata:', {
                edition: this.currentEdition,
                volume: volumeFolder,
                availableVolumes: this.bookViewerMetadata?.editions?.[this.currentEdition]?.volumes ? 
                    Object.keys(this.bookViewerMetadata.editions[this.currentEdition].volumes) : 'none'
            });
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô metadata ‡πÉ‡∏´‡πâ fallback ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
        console.warn(`Volume ${volumeFolder} not found in metadata, falling back to search method`);
        return await this.fallbackGetTotalPages(volumeFolder);
    }
    


    async loadBookViewerMetadata() {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡πÉ‡∏ô localStorage
            const cachedData = localStorage.getItem('tipitaka-book-viewer');
            const cachedTimestamp = localStorage.getItem('tipitaka-book-viewer-timestamp');
            
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ cache ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            if (cachedData && cachedTimestamp) {
                const age = Date.now() - parseInt(cachedTimestamp);
                const maxAge = 24 * 60 * 60 * 1000; // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                
                if (age < maxAge) {
                    console.log('Using cached book viewer metadata');
                    const metadata = JSON.parse(cachedData);
                    
                    // Validate cache - check if volume 1 has title
                    if (metadata?.editions?.ch?.volumes?.['1']?.title) {
                        this.bookViewerMetadata = metadata;
                        return;
                    } else {
                        console.log('‚ö†Ô∏è Cache validation failed - clearing invalid cache');
                        localStorage.removeItem('tipitaka-book-viewer');
                        localStorage.removeItem('tipitaka-book-viewer-timestamp');
                    }
                }
            }
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
            console.log('Fetching book viewer metadata from server...');
            const response = await fetch('/tipitaka/book-viewer.json', {
                cache: 'force-cache'
            });
            
            if (!response.ok) {
                throw new Error(`Failed to load book viewer metadata: ${response.status}`);
            }
            
            this.bookViewerMetadata = await response.json();
            
            // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô localStorage
            localStorage.setItem('tipitaka-book-viewer', JSON.stringify(this.bookViewerMetadata));
            localStorage.setItem('tipitaka-book-viewer-timestamp', Date.now().toString());
            
            console.log('Book viewer metadata loaded successfully');
            
        } catch (error) {
            console.error('Error loading book viewer metadata:', error);
            this.bookViewerMetadata = null;
        }
    }
    
    async fallbackGetTotalPages(volumeFolder) {
        // Fallback: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ metadata
        console.warn(`No metadata available for volume ${volumeFolder}, returning 0 pages`);
        return 0;
    }


    

    


    async preloadCurrentPages() {
        // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà (left + right) ‡∏ö‡∏ß‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å 1 ‡∏´‡∏ô‡πâ‡∏≤
        const pagesToPreload = [];
        
        // ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (currentPageIndex ‡πÅ‡∏•‡∏∞ currentPageIndex + 1)
        for (let i = this.currentPageIndex; 
             i <= Math.min(this.totalPages - 1, this.currentPageIndex + 2); 
             i++) {
            if (!this.preloadedPages.has(i)) {
                pagesToPreload.push(i);
            }
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏Å‡∏±‡∏ô)
        const preloadPromises = pagesToPreload.map(pageIndex => 
            this.preloadSinglePage(pageIndex)
        );
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö‡πÅ‡∏Ñ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (2 ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å)
        if (preloadPromises.length > 0) {
            await Promise.all(preloadPromises.slice(0, 2));
            
            // ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô background
            if (preloadPromises.length > 2) {
                Promise.all(preloadPromises.slice(2)).catch(console.warn);
            }
        }
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏° smart preloading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        this.startSmartPreloading();
    }
    
    async preloadSinglePage(pageIndex) {
        try {
            const pageNum = pageIndex + 1;
            const imagePath = `/tipitaka/${this.currentEdition}/${this.currentVolume}/${pageNum}.png`;
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô cache ‡∏Å‡πà‡∏≠‡∏ô
            if (this.imageCache.has(imagePath)) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á page object ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ image ‡∏à‡∏≤‡∏Å cache
                this.pages[pageIndex] = {
                    number: pageNum,
                    path: imagePath,
                    cached: true
                };
                this.preloadedPages.add(pageIndex);
                return Promise.resolve(pageIndex);
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á page object
            this.pages[pageIndex] = {
                number: pageNum,
                path: imagePath
            };
            this.preloadedPages.add(pageIndex);
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô cache
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = () => {
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô cache
                    this.addToImageCache(imagePath, img);
                    resolve(pageIndex);
                };
                img.onerror = () => {
                    console.warn(`Failed to preload page ${pageNum}`);
                    resolve(pageIndex); // resolve anyway ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                };
                img.src = imagePath;
            });
            
        } catch (error) {
            console.warn(`Error preloading page ${pageIndex + 1}:`, error);
        }
    }
    
    addToImageCache(imagePath, img) {
        // ‡∏ñ‡πâ‡∏≤ cache ‡πÄ‡∏ï‡πá‡∏° ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô (LRU-like)
        if (this.imageCache.size >= this.maxCacheSize) {
            const firstKey = this.imageCache.keys().next().value;
            this.imageCache.delete(firstKey);
        }
        
        this.imageCache.set(imagePath, img);
        console.log(`Image cached: ${imagePath} (${this.imageCache.size}/${this.maxCacheSize})`);
    }
    

    
    clearImageCache() {
        this.imageCache.clear();
        console.log('Image cache cleared');
    }
    
    // Session State Management
    saveSessionState() {
        const state = {
            volume: this.currentVolume,
            edition: this.currentEdition,
            pageIndex: this.currentPageIndex,
            timestamp: Date.now()
        };
        
        try {
            sessionStorage.setItem('tipitaka-reader-state', JSON.stringify(state));
        } catch (error) {
            console.warn('Failed to save session state:', error);
        }
    }
    

    
    setupCleanup() {
        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        window.addEventListener('beforeunload', () => {
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å state ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            this.saveSessionState();
            
            // ‡∏•‡πâ‡∏≤‡∏á timeout
            if (this.preloadingTimeout) {
                clearTimeout(this.preloadingTimeout);
            }
        });
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                // ‡∏•‡∏î cache ‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏∂‡πà‡∏á ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô
                this.trimImageCache();
            }
        });
    }
    
    trimImageCache() {
        const targetSize = Math.floor(this.maxCacheSize / 2);
        while (this.imageCache.size > targetSize) {
            const firstKey = this.imageCache.keys().next().value;
            this.imageCache.delete(firstKey);
        }
        console.log(`Image cache trimmed to ${this.imageCache.size} items`);
    }
    
    startSmartPreloading() {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å preloading ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (this.preloadingTimeout) {
            clearTimeout(this.preloadingTimeout);
        }
        
        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        this.preloadingTimeout = setTimeout(() => {
            this.preloadNextPages();
        }, 1000);
    }
    
    async preloadNextPages() {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 3-4 ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô background
        const startIndex = Math.max(0, this.currentPageIndex + 3);
        const endIndex = Math.min(this.totalPages - 1, this.currentPageIndex + 6);
        
        for (let i = startIndex; i <= endIndex; i++) {
            if (!this.preloadedPages.has(i)) {
                // ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏° delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                setTimeout(() => {
                    this.preloadSinglePage(i);
                }, (i - startIndex) * 200); // delay 200ms ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
            }
        }
    }



    /**
     * Update display - CORRECTED VERSION
     * LEFT side = EVEN pages (2, 4, 6, 8...)
     * RIGHT side = ODD pages (1, 3, 5, 7...)
     */
    updateDisplay() {
        const leftPageImg = document.getElementById('leftPageImg');
        const rightPageImg = document.getElementById('rightPageImg');
        const leftPageNum = document.getElementById('leftPageNum');
        const rightPageNum = document.getElementById('rightPageNum');
        
        console.log('Current page index:', this.currentPageIndex);
        console.log('Total pages:', this.totalPages);
        
        // RIGHT PAGE (ODD NUMBERS): Show page at currentPageIndex if it's odd
        let rightPageData = null;
        if (this.currentPageIndex < this.totalPages) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á page object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
            if (!this.pages[this.currentPageIndex]) {
                const pageNum = this.currentPageIndex + 1;
                this.pages[this.currentPageIndex] = {
                    number: pageNum,
                    path: `/tipitaka/${this.currentEdition}/${this.currentVolume}/${pageNum}.png`
                };
            }
            
            const currentPage = this.pages[this.currentPageIndex];
            console.log('Current page number:', currentPage.number);
            
            // If current page is odd, show it on the right
            if (currentPage.number % 2 === 1) {
                rightPageData = currentPage;
            } else {
                // If current page is even, look for the next odd page
                const nextPageIndex = this.currentPageIndex + 1;
                if (nextPageIndex < this.totalPages) {
                    if (!this.pages[nextPageIndex]) {
                        const pageNum = nextPageIndex + 1;
                        this.pages[nextPageIndex] = {
                            number: pageNum,
                            path: `/tipitaka/${this.currentEdition}/${this.currentVolume}/${pageNum}.png`
                        };
                    }
                    if (this.pages[nextPageIndex].number % 2 === 1) {
                        rightPageData = this.pages[nextPageIndex];
                    }
                }
            }
        }
        
        // Display right page (odd numbers)
        if (rightPageData && rightPageImg && rightPageNum) {
            rightPageImg.src = rightPageData.path;
            rightPageImg.style.display = 'block';
            rightPageNum.textContent = rightPageData.number.toString();
            rightPageNum.style.display = 'block'; // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
            console.log('Right page (odd):', rightPageData.number);
        } else if (rightPageImg && rightPageNum) {
            rightPageImg.style.display = 'none';
            rightPageNum.textContent = '';
            rightPageNum.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
        }
        
        // LEFT PAGE (EVEN NUMBERS): Look for previous even page
        let leftPageData = null;
        if (rightPageData && rightPageData.number > 1) {
            // Find the previous even page before the right page
            const leftPageNum = rightPageData.number - 1;
            const leftPageIndex = leftPageNum - 1; // Convert to 0-based index
            
            if (leftPageIndex >= 0 && leftPageIndex < this.totalPages) {
                if (!this.pages[leftPageIndex]) {
                    this.pages[leftPageIndex] = {
                        number: leftPageNum,
                        path: `/tipitaka/${this.currentEdition}/${this.currentVolume}/${leftPageNum}.png`
                    };
                }
                leftPageData = this.pages[leftPageIndex];
            }
        }
        
        // Display left page (even numbers)
        if (leftPageData && leftPageImg && leftPageNum) {
            leftPageImg.src = leftPageData.path;
            leftPageImg.style.display = 'block';
            leftPageNum.textContent = leftPageData.number.toString();
            leftPageNum.style.display = 'block'; // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
            console.log('Left page (even):', leftPageData.number);
        } else if (leftPageImg && leftPageNum) {
            leftPageImg.style.display = 'none';
            leftPageNum.textContent = '';
            leftPageNum.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
        }
        
        this.updatePageInfo(leftPageData, rightPageData);
        this.updateControls();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        this.updateURL();
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å state ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        this.saveSessionState();
    }

    updatePageInfo(leftPageData, rightPageData) {
        const currentPage = document.getElementById('currentPage');
        const currentPage2 = document.getElementById('currentPage2');
        const totalPages = document.getElementById('totalPages');
        
        // Left = even numbers, Right = odd numbers
        if (currentPage) {
            currentPage.textContent = leftPageData ? leftPageData.number.toString() : '-';
        }
        if (currentPage2) {
            currentPage2.textContent = rightPageData ? rightPageData.number.toString() : '-';
        }
        if (totalPages) {
            totalPages.textContent = this.totalPages.toString();
        }
    }

    updateControls() {
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const firstBtn = document.getElementById('firstBtn');
        const lastBtn = document.getElementById('lastBtn');

        if (prevBtn) prevBtn.disabled = this.currentPageIndex <= 0;
        if (nextBtn) nextBtn.disabled = this.currentPageIndex >= this.totalPages - 1;
        if (firstBtn) firstBtn.disabled = this.currentPageIndex <= 0;
        if (lastBtn) lastBtn.disabled = this.currentPageIndex >= this.totalPages - 1;
    }

    async prevPage() {
        if (this.currentPageIndex > 1) {
            this.currentPageIndex -= 2;
            if (this.currentPageIndex < 0) this.currentPageIndex = 0;
            
            // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            await this.preloadCurrentPages();
            this.updateDisplay();
        }
    }

    async nextPage() {
        if (this.currentPageIndex < this.totalPages - 2) {
            this.currentPageIndex += 2;
            
            // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            await this.preloadCurrentPages();
            this.updateDisplay();
        }
    }

    async goToPage(pageIndex) {
        if (pageIndex >= 0 && pageIndex < this.totalPages) {
            this.currentPageIndex = pageIndex;
            
            // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            await this.preloadCurrentPages();
            this.updateDisplay(); // ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å updateURL() ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        }
    }

    showLoading() {
        const loading = document.getElementById('loading');
        const container = document.getElementById('flipbook-container');
        const controls = document.getElementById('controls');
        
        if (loading) loading.style.display = 'block';
        if (container) container.style.display = 'block';
        if (controls) controls.style.display = 'none';
    }

    showFlipbook() {
        const loading = document.getElementById('loading');
        const container = document.getElementById('flipbook-container');
        const controls = document.getElementById('controls');
        
        if (loading) loading.style.display = 'none';
        if (container) container.style.display = 'block';
        if (controls) controls.style.display = 'block';
    }

    hideFlipbook() {
        const container = document.getElementById('flipbook-container');
        const controls = document.getElementById('controls');
        
        if (container) container.style.display = 'none';
        if (controls) controls.style.display = 'none';
        
        // ‡∏ã‡πà‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        this.updateVolumeDisplay(null);
    }

    showHelp() {
        const helpText = `‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Flipbook Viewer:

‚å®Ô∏è ‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå:
‚Ä¢ ‚Üí ‡∏´‡∏£‡∏∑‡∏≠ Space: ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
‚Ä¢ ‚Üê: ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤  
‚Ä¢ Home: ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
‚Ä¢ End: ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

üîò ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°:
‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å/‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

üí° ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤:
‚Ä¢ ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà (2, 4, 6, 8...)
‚Ä¢ ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤: ‡∏´ŸÜ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà (1, 3, 5, 7...)

üîó URL Parameters (Required):
üìù Parameters ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ:
‚Ä¢ edition/e = ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏â‡∏ö‡∏±‡∏ö (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
‚Ä¢ volume/v = ‡πÄ‡∏•‡∏Ç‡πÄ‡∏•‡πà‡∏° (CH:1-40, MC:1-45)  
‚Ä¢ page/p = ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤

üìÑ ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°:
‚Ä¢ ?edition=[‡∏â‡∏ö‡∏±‡∏ö]&volume=[‡πÄ‡∏•‡πà‡∏°]&page=[‡∏´‡∏ô‡πâ‡∏≤]

üìù ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠:
‚Ä¢ ?e=[‡∏â‡∏ö‡∏±‡∏ö]&v=[‡πÄ‡∏•‡πà‡∏°]&p=[‡∏´‡∏ô‡πâ‡∏≤]

üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:
‚Ä¢ Edition parameter ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÄ‡∏ï‡πá‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡∏¢‡πà‡∏≠) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
‚Ä¢ ‡πÅ‡∏ä‡∏£‡πå URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤`;

        alert(helpText);
    }
}

// Initialize the viewer when the page loads
document.addEventListener('DOMContentLoaded', () => {
    try {
        new BookViewer();
        console.log('‚úÖ Flipbook Viewer initialized successfully');
    } catch (error) {
        console.error('‚ùå Error initializing Flipbook Viewer:', error);
    }
});