---
/**
 * Enhanced Hypothes.is Annotation Component for TPTK
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° web annotation ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏û‡∏£‡∏∞‡πÑ‡∏ï‡∏£‡∏õ‡∏¥‡∏é‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏° advanced configuration
 * 
 * Usage: 
 *         console.log(`üè∑Ô∏è  Group: ${annotationContext.selectedGroup || 'public'}`);
      console.log(`üìä Review Status: ${annotationContext.reviewStatus || 'none'}`);
      console.log(`üìö Content: ${annotationContext.basket || 'unknown'} basket`);
      console.log('üîß Config:', hypothesisConfig);
      
      statusDiv.setAttribute('data-enabled', 'true');esisAnnotation frontmatter={frontmatter} />
 *   <HypothesisAnnotation frontmatter={frontmatter} environment="tptk_review" />
 * 
 * ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î Hypothes.is script ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠:
 * - ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ tipitaka (type: "tipitaka" ‡πÉ‡∏ô frontmatter)
 * - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î annotation system
 */

import { getHypothesisConfig, type HypothesisAnnotationProps } from '@utils/hypothesis-config';
import { selectGroupForContent, getGroupIdForSelection } from '@utils/hypothesis-groups';

type Props = HypothesisAnnotationProps;

const {
  frontmatter = {},
  enabled,
  environment = 'development',
  configOverrides = {}
} = Astro.props;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ tipitaka ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const isTipitakaPage = frontmatter.type === 'tipitaka';

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL pattern ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤ tipitaka
const currentUrl = Astro.url.pathname;
const isTipitakaPath = currentUrl.includes('/tipitaka/');

// ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î Hypothes.is ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á tipitaka content ‡πÅ‡∏•‡∏∞ path
const shouldLoadHypothesis = enabled !== false && isTipitakaPage && isTipitakaPath;

// Simplified: Use default group selection
const selectedGroup = selectGroupForContent(frontmatter);
const defaultGroupId = getGroupIdForSelection(selectedGroup);

const { group: overrideGroup, ...restOverrides } = configOverrides;

const baseHypothesisConfig = getHypothesisConfig(environment, {
  openSidebar: false,
  ...restOverrides
});

const resolvedGroupId = overrideGroup ?? defaultGroupId ?? baseHypothesisConfig.group;
const isReviewEnvironment = environment === 'tptk_review';

const DEFAULT_SERVICE_CONFIG = {
  apiUrl: 'https://hypothes.is/api',
  authority: 'hypothes.is'
};

const baseServices = baseHypothesisConfig.services?.length
  ? baseHypothesisConfig.services.map(service => ({ ...service }))
  : undefined;

let services = baseServices;

if (resolvedGroupId && isReviewEnvironment) {
  if (services?.length) {
    const [firstService, ...otherServices] = services;
    services = [
      { ...DEFAULT_SERVICE_CONFIG, ...firstService, groups: [resolvedGroupId] },
      ...otherServices
    ];
  } else {
    services = [{ ...DEFAULT_SERVICE_CONFIG, groups: [resolvedGroupId] }];
  }
}

const configWithServices = {
  ...baseHypothesisConfig,
  ...(services ? { services } : {}),
  openSidebar: false
};

const { group: _ignoredGroup, ...hypothesisConfig } = configWithServices;

// Additional context for debugging and UI
const annotationContext = {
  selectedGroup,
  groupId: resolvedGroupId && isReviewEnvironment ? resolvedGroupId : undefined,
  reviewStatus: frontmatter.review?.current,
  basket: frontmatter.basket,
  environment
};
---

{shouldLoadHypothesis && (
  <>
    <!-- Hypothes.is Configuration -->
    <script type="application/json" class="js-hypothesis-config" set:html={JSON.stringify(hypothesisConfig)} />
    
    <!-- Hypothes.is Embed Script -->
    <script async defer src="https://hypothes.is/embed.js"></script>
    
    <!-- Status indicator (hidden by default) -->
    <div id="hypothesis-status" style="display: none;" data-enabled="true"></div>
    
    <!-- Integration Debug & Enhancement Script -->
    <script define:vars={{ 
      isTipitakaPage, 
      isTipitakaPath, 
      shouldLoadHypothesis, 
      currentUrl, 
      selectedGroup, 
      resolvedGroupId,
      hypothesisConfig 
    }}>
      console.log('[HypothesisAnnotation] Clean Integration Status:', {
        isTipitakaPage: isTipitakaPage,
        isTipitakaPath: isTipitakaPath,
        shouldLoad: shouldLoadHypothesis,
        currentUrl: currentUrl,
        selectedGroup: selectedGroup,
        groupId: resolvedGroupId
      });

      // Enhanced Starlight integration
      document.addEventListener('DOMContentLoaded', function() {
        // Wait for Starlight layout to be ready
        if (typeof window.hypothesisConfig === 'undefined') {
          window.hypothesisConfig = function() {
            return hypothesisConfig;
          };
        }
        
        // Adjust positioning for Starlight sidebar
        const starlightSidebar = document.querySelector('.sidebar');
        if (starlightSidebar) {
          console.log('[HypothesisAnnotation] Starlight sidebar detected, adjusting layout');
        }
      });
    </script>
  </>
)}

<style>
  /* Enhanced Hypothesis UI Customizations for TPTK + Starlight */
  
  /* Basic Hypothesis styling */
  .hypothesis-adder {
    border-radius: 6px !important;
  }
  
  .hypothesis-highlight {
    background-color: rgba(79, 70, 229, 0.15) !important;
    border-bottom: 2px solid #4f46e5 !important;
  }

  /* Starlight Layout Integration */
  @media (min-width: 72rem) {
    /* Desktop: Adjust for Starlight sidebar */
    .hypothesis-sidebar {
      right: 0 !important;
      z-index: 100 !important;
    }
    
    /* Prevent overlap with Starlight right sidebar */
    .right-sidebar + .hypothesis-sidebar {
      right: var(--sl-sidebar-width, 18rem) !important;
    }
  }

  @media (max-width: 72rem) {
    /* Mobile/Tablet: Full width sidebar */
    .hypothesis-sidebar {
      right: 0 !important;
      left: 0 !important;
      width: 100% !important;
      z-index: 200 !important;
    }
  }

  /* Ensure hypothesis doesn't interfere with Starlight navigation */
  .hypothesis-sidebar {
    position: fixed !important;
  }

  /* Custom TPTK branding for hypothesis */
  .hypothesis-sidebar .hypothesis-sidebar-header {
    background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%) !important;
    color: white !important;
  }

  /* Hide hypothesis on non-tipitaka pages */
  body:not([data-pagefind-ignore]) .hypothesis-adder {
    display: none !important;
  }
</style>

<script define:vars={{ hypothesisConfig, annotationContext }}>
  // Enhanced TPTK Annotation System with Group Management
  document.addEventListener('DOMContentLoaded', () => {
    const statusDiv = document.getElementById('hypothesis-status');
    
    if (statusDiv) {
      console.log(`üìù TPTK Annotation System initialized`);
      console.log(`üè∑Ô∏è  Group: ${annotationContext.selectedGroup || 'public'} (${annotationContext.environment})`);
      console.log(`üìä Review Status: ${annotationContext.reviewStatus || 'none'}`);
      console.log(`ÔøΩ Content: ${annotationContext.basket || 'unknown'} basket`);
      console.log('üîß Config:', hypothesisConfig);
      
      statusDiv.setAttribute('data-enabled', 'true');
      statusDiv.setAttribute('data-environment', annotationContext.environment);
      statusDiv.setAttribute('data-group', annotationContext.groupId || 'public');
      statusDiv.setAttribute('data-selected-group', annotationContext.selectedGroup || '');
      
      // Store config globally for potential use by other scripts
      window.tptkHypothesisConfig = hypothesisConfig;
      window.tptkAnnotationContext = annotationContext;
    }
    
    // Listen for Hypothesis ready event
    window.addEventListener('hypothesisReady', () => {
      console.log('üéØ Hypothesis is ready for annotations');
      
      // Log group information when ready
      if (annotationContext.selectedGroup) {
        console.log(`üîê Private group selected: ${annotationContext.selectedGroup}`);
      } else {
        console.log('üåê Using public annotations');
      }
    });
  });
</script>