name: Deploy Astro

on:
  push:
    branches: [main]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Prepare SSH
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf '%s\n' "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Validate and prepare deployment
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} '
            set -e
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
            
            # Validate DEPLOY_PATH is not empty and is absolute path
            if [ -z "$DEPLOY_PATH" ] || [ "${DEPLOY_PATH:0:1}" != "/" ]; then
              echo "Error: DEPLOY_PATH is invalid or not set properly"
              echo "DEPLOY_PATH should be an absolute path like /usr/local/lsws/Example/html/astro-site"
              exit 1
            fi
            
            # Ensure deploy directory exists
            mkdir -p "$DEPLOY_PATH"
            
            # Create backup directory safely
            mkdir -p "$DEPLOY_PATH/backup"
            
            # Create backup of current deployment (if exists and has content)
            if [ -d "$DEPLOY_PATH" ] && [ "$(ls -A "$DEPLOY_PATH" 2>/dev/null | grep -v backup | head -1)" ]; then
              echo "Creating backup..."
              # Clear old backup first
              rm -rf "$DEPLOY_PATH/backup"/*
              # Copy current files to backup (exclude backup directory itself)
              find "$DEPLOY_PATH" -maxdepth 1 -type f -exec cp {} "$DEPLOY_PATH/backup/" \; 2>/dev/null || true
              find "$DEPLOY_PATH" -maxdepth 1 -type d ! -name "$(basename "$DEPLOY_PATH")" ! -name "backup" -exec cp -r {} "$DEPLOY_PATH/backup/" \; 2>/dev/null || true
            fi
            
            # Clear current deployment (except backup and .htaccess)
            find "$DEPLOY_PATH" -maxdepth 1 -type f ! -name ".htaccess" ! -path "*/backup/*" -delete 2>/dev/null || true
            find "$DEPLOY_PATH" -maxdepth 1 -type d ! -name "$(basename "$DEPLOY_PATH")" ! -name "backup" -exec rm -rf {} + 2>/dev/null || true
          '

      - name: Deploy via rsync
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes" dist/ ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.DEPLOY_PATH }}/

      - name: Set permissions and reload OpenLiteSpeed
        run: |
          ssh -tt -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} '
            set -eu
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"

            if [ -z "$DEPLOY_PATH" ] || [ "${DEPLOY_PATH#/}" = "$DEPLOY_PATH" ]; then
              echo "Error: DEPLOY_PATH must be an absolute path." >&2
              exit 1
            fi

            if [ "$(id -u)" -ne 0 ] && ! command -v sudo >/dev/null 2>&1; then
              echo "Error: sudo is required when deploying as a non-root user." >&2
              exit 1
            fi

            # Helper to elevate commands when sudo is available
            run_priv() {
              if [ "$(id -u)" -eq 0 ]; then
                "$@"
              elif command -v sudo >/dev/null 2>&1; then
                sudo -n "$@"
              else
                "$@"
              fi
            }

            if ! run_priv true 2>/dev/null; then
              echo "Error: passwordless sudo (or root access) is required for deployment tasks." >&2
              exit 1
            fi

            run_priv chown -R nobody:nogroup "$DEPLOY_PATH"
            run_priv find "$DEPLOY_PATH" -type f -exec chmod 644 {} \;
            run_priv find "$DEPLOY_PATH" -type d -exec chmod 755 {} \;

            if [ -f "$DEPLOY_PATH/.htaccess" ]; then
              run_priv chmod 644 "$DEPLOY_PATH/.htaccess"
            fi

            if ! run_priv systemctl reload lsws; then
              run_priv /usr/local/lsws/bin/lswsctrl reload
            fi

            echo "Deployment completed successfully!"
            echo "Site deployed to: $DEPLOY_PATH"
          '

      - name: Deployment notification
        run: |
          echo "üöÄ Deployment completed!"
          echo "üìÅ Deployed to: ${{ secrets.DEPLOY_PATH }}"
          echo "üåê Access your site at: https://www.tipitakahall.org/"